//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CLLAIntelligentSausage.Modelos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CLLASausageContext : DbContext
    {
        public CLLASausageContext()
            : base("name=CLLASausageContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ExpedienteDigital> ExpedienteDigital { get; set; }
        public virtual DbSet<ExpedienteDigitalArchivo> ExpedienteDigitalArchivo { get; set; }
        public virtual DbSet<ExpedienteDigitalBitacora> ExpedienteDigitalBitacora { get; set; }
        public virtual DbSet<ExpedienteDigitalConfiguracion> ExpedienteDigitalConfiguracion { get; set; }
        public virtual DbSet<ExpedienteDigitalConfiguracionArchivo> ExpedienteDigitalConfiguracionArchivo { get; set; }
        public virtual DbSet<ExpedienteDigitalConfiguracionArchivoCliente> ExpedienteDigitalConfiguracionArchivoCliente { get; set; }
        public virtual DbSet<ExpedienteDigitalConfiguracionCliente> ExpedienteDigitalConfiguracionCliente { get; set; }
        public virtual DbSet<ExpedienteDigitalEventoBitacora> ExpedienteDigitalEventoBitacora { get; set; }
        public virtual DbSet<ExpedienteDigitalGastoComprobado> ExpedienteDigitalGastoComprobado { get; set; }
        public virtual DbSet<ExpedienteDigitalMetaDato> ExpedienteDigitalMetaDato { get; set; }
        public virtual DbSet<ExpedienteDigitalOrigen> ExpedienteDigitalOrigen { get; set; }
        public virtual DbSet<ExpedienteDigitalProcesamiento> ExpedienteDigitalProcesamiento { get; set; }
        public virtual DbSet<ExpedienteDigitalProcesamientoArchivoBitacora> ExpedienteDigitalProcesamientoArchivoBitacora { get; set; }
        public virtual DbSet<ExpedienteDigitalTipoArchivo> ExpedienteDigitalTipoArchivo { get; set; }
        public virtual DbSet<vwExpedienteDigtialProcesamientoArchivoBitacoraPendientes> vwExpedienteDigtialProcesamientoArchivoBitacoraPendientes { get; set; }
        public virtual DbSet<ExpedienteDigitalProcesamientoArchivo> ExpedienteDigitalProcesamientoArchivo { get; set; }
    
        [DbFunction("CLLASausageContext", "fnExpedienteDigitalFinalizadoPendiente")]
        public virtual IQueryable<fnExpedienteDigitalFinalizadoPendiente_Result> fnExpedienteDigitalFinalizadoPendiente()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnExpedienteDigitalFinalizadoPendiente_Result>("[CLLASausageContext].[fnExpedienteDigitalFinalizadoPendiente]()");
        }
    
        [DbFunction("CLLASausageContext", "fnExpedienteDigitalProcesamientoPendiente")]
        public virtual IQueryable<fnExpedienteDigitalProcesamientoPendiente_Result> fnExpedienteDigitalProcesamientoPendiente()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnExpedienteDigitalProcesamientoPendiente_Result>("[CLLASausageContext].[fnExpedienteDigitalProcesamientoPendiente]()");
        }
    
        public virtual int spExpedienteDigitalEliminaClienteSysExpert(Nullable<int> claveCliente)
        {
            var claveClienteParameter = claveCliente.HasValue ?
                new ObjectParameter("ClaveCliente", claveCliente) :
                new ObjectParameter("ClaveCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spExpedienteDigitalEliminaClienteSysExpert", claveClienteParameter);
        }
    
        public virtual int spExpedienteDigitalImportaFacturasYMetadatos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spExpedienteDigitalImportaFacturasYMetadatos");
        }
    
        public virtual int spExpedienteDigitalImportaPedimentosYMetadatos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spExpedienteDigitalImportaPedimentosYMetadatos");
        }
    
        public virtual int spExpedienteDigitalInsertaArchivo(Nullable<int> idExpedienteDigital, Nullable<int> idExpedienteDigitalProcesamientoArchivo, string nomenclaturaRutaCompletaFinalizado, string rutaCompletaFinalizado)
        {
            var idExpedienteDigitalParameter = idExpedienteDigital.HasValue ?
                new ObjectParameter("IdExpedienteDigital", idExpedienteDigital) :
                new ObjectParameter("IdExpedienteDigital", typeof(int));
    
            var idExpedienteDigitalProcesamientoArchivoParameter = idExpedienteDigitalProcesamientoArchivo.HasValue ?
                new ObjectParameter("IdExpedienteDigitalProcesamientoArchivo", idExpedienteDigitalProcesamientoArchivo) :
                new ObjectParameter("IdExpedienteDigitalProcesamientoArchivo", typeof(int));
    
            var nomenclaturaRutaCompletaFinalizadoParameter = nomenclaturaRutaCompletaFinalizado != null ?
                new ObjectParameter("NomenclaturaRutaCompletaFinalizado", nomenclaturaRutaCompletaFinalizado) :
                new ObjectParameter("NomenclaturaRutaCompletaFinalizado", typeof(string));
    
            var rutaCompletaFinalizadoParameter = rutaCompletaFinalizado != null ?
                new ObjectParameter("RutaCompletaFinalizado", rutaCompletaFinalizado) :
                new ObjectParameter("RutaCompletaFinalizado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spExpedienteDigitalInsertaArchivo", idExpedienteDigitalParameter, idExpedienteDigitalProcesamientoArchivoParameter, nomenclaturaRutaCompletaFinalizadoParameter, rutaCompletaFinalizadoParameter);
        }
    
        public virtual int spExpedienteDigitalInsertaProcesamientoArchivo(Nullable<int> idExpedienteDigitalProcesamiento, string archivoRutaCompletaOrigen, string archivoRutaCompletaDestino, Nullable<bool> requerido, ObjectParameter llavePrimaria)
        {
            var idExpedienteDigitalProcesamientoParameter = idExpedienteDigitalProcesamiento.HasValue ?
                new ObjectParameter("IdExpedienteDigitalProcesamiento", idExpedienteDigitalProcesamiento) :
                new ObjectParameter("IdExpedienteDigitalProcesamiento", typeof(int));
    
            var archivoRutaCompletaOrigenParameter = archivoRutaCompletaOrigen != null ?
                new ObjectParameter("ArchivoRutaCompletaOrigen", archivoRutaCompletaOrigen) :
                new ObjectParameter("ArchivoRutaCompletaOrigen", typeof(string));
    
            var archivoRutaCompletaDestinoParameter = archivoRutaCompletaDestino != null ?
                new ObjectParameter("ArchivoRutaCompletaDestino", archivoRutaCompletaDestino) :
                new ObjectParameter("ArchivoRutaCompletaDestino", typeof(string));
    
            var requeridoParameter = requerido.HasValue ?
                new ObjectParameter("Requerido", requerido) :
                new ObjectParameter("Requerido", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spExpedienteDigitalInsertaProcesamientoArchivo", idExpedienteDigitalProcesamientoParameter, archivoRutaCompletaOrigenParameter, archivoRutaCompletaDestinoParameter, requeridoParameter, llavePrimaria);
        }
    
        public virtual int spExpedienteDigitalGeneraTablaProcesamiento()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spExpedienteDigitalGeneraTablaProcesamiento");
        }
    }
}
